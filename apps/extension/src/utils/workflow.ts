import type PRAWorkflow from "@opengpts/types/rpa/workflow";
import {
  PlusIcon,
  ExternalLinkIcon, // Suggested for 'new-tab'
  ArrowLeftIcon, // Suggested for 'go-back'
  ClockIcon, // Suggested for 'delay'
  CameraIcon, // Suggested for 'take-screenshot'
  MousePointerClickIcon, // Suggested for 'browser-event' and 'event-click'
  FileTextIcon, // Suggested for 'get-text'
  EyeIcon,
  SquarePen, // Suggested for 'element-scroll'
  XCircle,
  FileDown
} from 'lucide-react';


export const categories: Record<string, PRAWorkflow.Category> = {
  interaction: {
    name: 'Web interaction',
    border: 'border-green-200 dark:border-green-300',
    color: 'bg-green-200 dark:bg-green-300 fill-green-200 dark:fill-green-300',
  },
  browser: {
    name: 'Browser',
    border: 'border-orange-200 dark:border-orange-300',
    color:
      'bg-orange-200 dark:bg-orange-300 fill-orange-200 dark:fill-orange-300',
  },
  general: {
    name: 'General',
    border: 'border-yellow-200 dark:border-yellow-300',
    color:
      'bg-yellow-200 dark:bg-yellow-300 fill-yellow-200 dark:fill-yellow-300',
  },
  onlineServices: {
    name: 'Online services',
    border: 'border-red-200 dark:border-red-300',
    color: 'bg-red-200 dark:bg-red-300 fill-red-200 dark:fill-red-300',
  },
  data: {
    name: 'Data',
    border: 'border-lime-200 dark:border-lime-300',
    color: 'bg-lime-200 dark:bg-lime-300 fill-lime-200 dark:fill-lime-300',
  },
  conditions: {
    name: 'Control flow',
    border: 'border-blue-200 dark:border-blue-300',
    color: 'bg-blue-200 dark:bg-blue-300 fill-blue-200 dark:fill-blue-300',
  },
  package: {
    name: 'Packages',
    border: 'border-cyan-200 dark:border-cyan-300',
    color: 'bg-cyan-200 dark:bg-cyan-300 fill-cyan-200 dark:fill-cyan-300',
  },
  export: {
    name: 'Export',
    border: 'border-purple-200 dark:border-purple-300',
    color: 'bg-purple-200 dark:bg-purple-300 fill-purple-200 dark:fill-purple-300',
  },
};




export const getBlocks: PRAWorkflow.getBlocks = () => ({
  trigger: {
    name: 'Trigger',
    description: 'Block where workflow will start executing',
    icon: 'PlusIcon',
    component: 'BlockBasic',
    editComponent: 'EditTrigger',
    category: 'general',
    inputs: 0,
    outputs: 1,
    allowedInputs: true,
    maxConnection: 1,
    refDataKeys: [],
    data: {
      disableBlock: false,
      description: '',
      type: 'manual',
      interval: 60,
      delay: 5,
      date: '',
      time: '00:00',
      shortcut: '',
      activeInInput: false,
      isUrlRegex: false,
      days: [],
      contextMenuName: '',
      contextTypes: [],
      parameters: [],
      preferParamsInTab: false,
      observeElement: {
        selector: '',
        baseSelector: '',
        matchPattern: '',
        targetOptions: {
          subtree: false,
          childList: true,
          attributes: false,
          attributeFilter: [],
          characterData: false,
        },
        baseElOptions: {
          subtree: false,
          childList: true,
          attributes: false,
          attributeFilter: [],
          characterData: false,
        },
      },
    },
  },

  // 'trigger-event': {
  //   name: 'Trigger event',
  //   description: 'Trigger event',
  //   icon: 'riLightbulbFlashLine',
  //   component: 'BlockBasic',
  //   editComponent: 'EditTriggerEvent',
  //   category: 'interaction',
  //   inputs: 1,
  //   outputs: 1,
  //   allowedInputs: true,
  //   maxConnection: 1,
  //   refDataKeys: ['selector', 'eventParams.clientX', 'eventParams.clientY'],
  //   data: {
  //     disableBlock: false,
  //     description: '',
  //     findBy: 'cssSelector',
  //     waitForSelector: false,
  //     waitSelectorTimeout: 5000,
  //     selector: 'html',
  //     markEl: false,
  //     multiple: false,
  //     eventName: '',
  //     eventType: '',
  //     eventParams: { bubbles: true, cancelable: false },
  //   },
  // },
  // 'execute-workflow': {
  //   name: 'Execute workflow',
  //   description: '',
  //   icon: 'riFlowChart',
  //   component: 'BlockBasic',
  //   category: 'general',
  //   editComponent: 'EditExecuteWorkflow',
  //   inputs: 1,
  //   outputs: 1,
  //   allowedInputs: true,
  //   maxConnection: 1,
  //   refDataKeys: ['globalData'],
  //   data: {
  //     disableBlock: false,
  //     executeId: '',
  //     workflowId: '',
  //     globalData: '',
  //     description: '',
  //     insertAllVars: false,
  //     insertAllGlobalData: false,
  //   },
  // },
  // 'active-tab': {
  //   name: 'Active tab',
  //   description: "Set current tab that you're in as an active tab",
  //   icon: 'riWindowLine',
  //   component: 'BlockBasic',
  //   category: 'browser',
  //   disableEdit: true,
  //   inputs: 1,
  //   outputs: 1,
  //   allowedInputs: true,
  //   maxConnection: 1,
  //   data: {
  //     disableBlock: false,
  //   },
  // },
  'new-tab': {
    name: 'New tab',
    description: 'Create a new tab',
    icon: 'riGlobalLine',
    component: 'BlockBasic',
    editComponent: 'EditNewTab',
    category: 'browser',
    inputs: 1,
    outputs: 1,
    allowedInputs: true,
    maxConnection: 1,
    refDataKeys: ['url',],
    data: {
      disableBlock: false,
      description: '',
      url: 'https://www.google.com',
      active: true,
      tabZoom: 1,
      inGroup: false,
      waitTabLoaded: false,
      updatePrevTab: false,
      customUserAgent: false,
    },
  },
  // 'switch-tab': {
  //   name: 'Switch tab',
  //   description: 'Switch active tab',
  //   icon: 'riArrowLeftRightLine',
  //   component: 'BlockBasic',
  //   editComponent: 'EditSwitchTab',
  //   category: 'browser',
  //   inputs: 1,
  //   outputs: 1,
  //   allowedInputs: true,
  //   maxConnection: 1,
  //   refDataKeys: ['url', 'matchPattern', 'tabTitle'],
  //   data: {
  //     disableBlock: false,
  //     description: '',
  //     url: '',
  //     tabIndex: 0,
  //     tabTitle: '',
  //     matchPattern: '',
  //     activeTab: true,
  //     createIfNoMatch: false,
  //     findTabBy: 'match-patterns',
  //   },
  // },
  // 'new-window': {
  //   name: 'New window',
  //   description: 'Create a new window',
  //   icon: 'riWindow2Line',
  //   component: 'BlockBasic',
  //   editComponent: 'EditNewWindow',
  //   category: 'browser',
  //   inputs: 1,
  //   outputs: 1,
  //   allowedInputs: true,
  //   maxConnection: 1,
  //   refDataKeys: ['url'],
  //   data: {
  //     disableBlock: false,
  //     description: '',
  //     top: 0,
  //     left: 0,
  //     width: 0,
  //     url: '',
  //     height: 0,
  //     type: 'normal',
  //     incognito: false,
  //     windowState: 'normal',
  //   },
  // },
  // proxy: {
  //   name: 'Proxy',
  //   description: 'Set the proxy of the browser',
  //   icon: 'riShieldKeyholeLine',
  //   component: 'BlockBasic',
  //   category: 'browser',
  //   editComponent: 'EditProxy',
  //   inputs: 1,
  //   outputs: 1,
  //   maxConnection: 1,
  //   allowedInputs: true,
  //   refDataKeys: ['host', 'port', 'scheme'],
  //   data: {
  //     description: '',
  //     disableBlock: false,
  //     scheme: 'https',
  //     host: '',
  //     port: 443,
  //     bypassList: '',
  //     clearProxy: false,
  //   },
  // },
  'go-back': {
    name: 'Go back',
    description: 'Go back to the previous page',
    icon: 'riArrowGoBackLine',
    component: 'BlockBasic',
    category: 'browser',
    inputs: 1,
    outputs: 1,
    maxConnection: 1,
    disableEdit: true,
    allowedInputs: true,
    data: {
      disableBlock: false,
    },
  },
  // 'forward-page': {
  //   name: 'Go forward',
  //   description: 'Go forward to the next page',
  //   icon: 'riArrowGoForwardLine',
  //   component: 'BlockBasic',
  //   category: 'browser',
  //   inputs: 1,
  //   outputs: 1,
  //   maxConnection: 1,
  //   disableEdit: true,
  //   allowedInputs: true,
  //   data: {
  //     disableBlock: false,
  //   },
  // },
  'close-tab': {
    name: 'Close tab/window',
    icon: 'riCloseCircleLine',
    component: 'BlockBasic',
    category: 'browser',
    editComponent: 'EditCloseTab',
    inputs: 1,
    outputs: 1,
    maxConnection: 1,
    allowedInputs: true,
    refDataKeys: [],
    data: {
      disableBlock: false,
      url: '',
      description: '',
      activeTab: true,
      closeType: 'tab',
      allWindows: false,
    },
  },
  'take-screenshot': {
    name: 'Take screenshot',
    description: 'Take a screenshot of current active tab',
    icon: 'riImageLine',
    component: 'BlockBasic',
    category: 'browser',
    editComponent: 'EditTakeScreenshot',
    inputs: 1,
    outputs: 1,
    maxConnection: 1,
    allowedInputs: true,
    refDataKeys: ['fileName', 'selector', 'variableName'],
    autocomplete: ['variableName'],
    data: {
      description: '',
      disableBlock: false,
      fileName: '',
      ext: 'png',
      quality: 100,
      dataColumn: '',
      variableName: '',
      selector: '',
      fullPage: false,
      saveToColumn: false,
      saveToComputer: true,
      assignVariable: false,
      captureActiveTab: true,
    },
  },
  'browser-event': {
    name: 'Browser event',
    description: 'Wait until the selected event is triggered',
    icon: 'riLightbulbLine',
    component: 'BlockBasic',
    category: 'browser',
    editComponent: 'EditBrowserEvent',
    inputs: 1,
    outputs: 1,
    maxConnection: 1,
    allowedInputs: true,
    data: {
      disableBlock: false,
      description: '',
      timeout: 10000,
      eventName: 'tab:loaded',
      setAsActiveTab: true,
      activeTabLoaded: true,
      tabLoadedUrl: '',
      tabUrl: '',
      fileQuery: '',
    },
  },
  'event-click': {
    name: 'Click element',
    icon: 'riCursorLine',
    component: 'BlockBasic',
    editComponent: 'EditInteractionBase',
    category: 'interaction',
    inputs: 1,
    outputs: 1,
    allowedInputs: true,
    maxConnection: 1,
    refDataKeys: ['selector'],
    data: {
      disableBlock: false,
      description: '',
      findBy: 'cssSelector',
      waitForSelector: false,
      waitSelectorTimeout: 5000,
      selector: 'center:nth-child(1) > .gNO89b',
      markEl: false,
      multiple: false,
    },
  },
  delay: {
    name: 'Delay',
    description: 'Add delay before executing the next block',
    icon: 'riTimerLine',
    component: 'BlockDelay',
    editComponent: 'EditDelay',
    category: 'general',
    inputs: 1,
    outputs: 1,
    allowedInputs: true,
    maxConnection: 1,
    refDataKeys: ['time'],
    data: {
      disableBlock: false,
      time: 500,
    },
  },
  'get-text': {
    name: 'Get text',
    description: 'Get text from an element',
    icon: 'riParagraph',
    component: 'BlockBasic',
    editComponent: 'EditGetText',
    category: 'interaction',
    inputs: 1,
    outputs: 1,
    allowedInputs: true,
    maxConnection: 1,
    refDataKeys: [
      'selector',
      // 'variableName',
      // 'extraRowValue',
    ],
    autocomplete: ['variableName'],
    data: {
      disableBlock: false,
      description: '',
      findBy: 'cssSelector',
      waitForSelector: false,
      waitSelectorTimeout: 5000,
      selector: '#rso > .MjjYud:nth-child(1) .yuRUbf a',
      markEl: false,
      multiple: false,
      regex: '',
      prefixText: '',
      suffixText: '',
      regexExp: [],
      dataColumn: '',
      saveData: true,
      includeTags: false,
      addExtraRow: false,
      assignVariable: false,
      useTextContent: false,
      variableName: '',
      extraRowValue: '',
      extraRowDataColumn: '',
    },
  },
  // 'export-data': {
  //   name: 'Export data',
  //   icon: 'riDownloadLine',
  //   component: 'BlockBasic',
  //   editComponent: 'EditExportData',
  //   category: 'general',
  //   inputs: 1,
  //   outputs: 1,
  //   allowedInputs: true,
  //   maxConnection: 1,
  //   refDataKeys: ['name', 'variableName'],
  //   data: {
  //     disableBlock: false,
  //     name: '',
  //     refKey: '',
  //     type: 'json',
  //     description: '',
  //     variableName: '',
  //     csvDelimiter: ',',
  //     addBOMHeader: true,
  //     onConflict: 'uniquify',
  //     dataToExport: 'data-columns',
  //   },
  // },
  'element-scroll': {
    name: 'Scroll element',
    icon: 'riMouseLine',
    component: 'BlockBasic',
    editComponent: 'EditScrollElement',
    category: 'interaction',
    inputs: 1,
    outputs: 1,
    allowedInputs: true,
    maxConnection: 1,
    refDataKeys: ['selector'],
    data: {
      disableBlock: false,
      description: '',
      findBy: 'cssSelector',
      waitForSelector: false,
      waitSelectorTimeout: 5000,
      selector: 'html',
      markEl: false,
      multiple: false,
      scrollY: 0,
      scrollX: 0,
      incX: false,
      incY: false,
      smooth: false,
      scrollIntoView: false,
    },
  },
  // link: {
  //   name: 'Link',
  //   description: 'Open link element',
  //   icon: 'riLink',
  //   component: 'BlockBasic',
  //   editComponent: 'EditLink',
  //   category: 'interaction',
  //   inputs: 1,
  //   outputs: 1,
  //   allowedInputs: true,
  //   maxConnection: 1,
  //   refDataKeys: ['selector'],
  //   data: {
  //     disableBlock: false,
  //     description: '',
  //     findBy: 'cssSelector',
  //     waitForSelector: false,
  //     waitSelectorTimeout: 5000,
  //     selector: '',
  //     markEl: false,
  //     disableMultiple: true,
  //     openInNewTab: false,
  //   },
  // },
  'attribute-value': {
    name: 'Attribute value',
    description: 'Get attribute value of an element',
    icon: 'riBracketsLine',
    component: 'BlockBasic',
    editComponent: 'EditAttributeValue',
    category: 'interaction',
    inputs: 1,
    outputs: 1,
    allowedInputs: true,
    maxConnection: 1,
    refDataKeys: [
      'selector',
      'variableName',
      'attributeName',
      'extraRowValue',
      'attributeValue',
    ],
    autocomplete: ['variableName'],
    data: {
      disableBlock: false,
      description: '',
      findBy: 'cssSelector',
      waitForSelector: false,
      waitSelectorTimeout: 5000,
      selector: '',
      markEl: false,
      multiple: false,
      attributeValue: '',
      attributeName: '',
      assignVariable: false,
      variableName: '',
      dataColumn: '',
      saveData: true,
      action: 'get',
      addExtraRow: false,
      extraRowValue: '',
      extraRowDataColumn: '',
    },
  },
  forms: {
    name: 'Forms',
    icon: 'riInputCursorMove',
    description: 'Manipulate form(input, select, checkbox, and radio) element',
    component: 'BlockBasic',
    editComponent: 'EditForms',
    category: 'interaction',
    inputs: 1,
    outputs: 1,
    allowedInputs: true,
    maxConnection: 1,
    refDataKeys: [
      // 'selector',
      // 'variableName',
      'value',
      // 'optionPosition',
      // 'delay',
    ],
    autocomplete: ['variableName'],
    data: {
      disableBlock: false,
      description: '',
      findBy: 'cssSelector',
      waitForSelector: false,
      waitSelectorTimeout: 5000,
      selector: '#APjFqb',
      markEl: false,
      multiple: false,
      selected: false,
      clearValue: true,
      getValue: false,
      saveData: false,
      dataColumn: '',
      selectOptionBy: 'value',
      optionPosition: '1',
      assignVariable: false,
      variableName: '',
      type: 'text',
      value: 'github opengpts',
      delay: 0,
      events: [],
    },
  },
  exportData: {
    name: 'export Data',
    description: "export file",
    icon: 'FileDown',
    component: 'BlockBasic',
    editComponent: 'EditExportData',
    category: 'export',
    inputs: 1,
    outputs: 0,
    allowedInputs: true,
    refDataKeys: ['fileType'],
    autocomplete: [],
    data: {
      disableBlock: false,
      description: '',
      findBy: 'cssSelector',
      waitForSelector: false,
      waitSelectorTimeout: 5000,
      // markEl: false,
      // multiple: false,
      // selected: false,
      // clearValue: true,
      // getValue: false,
      saveData: false,
      dataColumn: '',
      selectOptionBy: 'value',
      delay: 0,
      events: [],
      fileType:'txt'
    }
  }

});

export const iconMap: Record<string, any> = {
  'trigger': PlusIcon,
  'new-tab': ExternalLinkIcon,
  'go-back': ArrowLeftIcon,
  'delay': ClockIcon,
  'take-screenshot': CameraIcon,
  'browser-event': MousePointerClickIcon,
  'event-click': MousePointerClickIcon, // Assuming 'event-click' is similar to 'browser-event'. If different, you might need to find a more suitable icon.
  'get-text': FileTextIcon,
  'element-scroll': EyeIcon,
  'forms': SquarePen,
  'close-tab': XCircle,
  'exportData':FileDown
}
